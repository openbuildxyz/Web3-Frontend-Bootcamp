// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "./IERC20.sol";
import "./IERC721.sol";

contract NFTMarket {
    IERC721 public nftContract;
    IERC20 public erc20Contract;
    address public owner;

    struct Listing {
        address nftAddress;
        uint256 tokenId;
        address seller;
        uint256 price;
        bool isForSale;
    }

    mapping(uint256 => Listing) public listings;

    event NFTListed(uint256 tokenId, address seller, uint256 price);
    event NFTPurchased(uint256 tokenId, address buyer, uint256 price);

    constructor(address _erc20Address) {
        owner = msg.sender;
        erc20Contract = IERC20(_erc20Address);
    }


    //- 用户可以将自己的NFT上架到市场。                                --完成
    //上架时需要指定NFT的合约地址、Token ID以及价格（使用ERC20代币）    --完成
    //声明上架NFT事件                                                 --完成
    // 上架NFT到市场
    function listNFT(address _nftAddress,uint256 tokenId, uint256 price) public {

        //选择自己的erc721地址
        nftContract = IERC721(_nftAddress);

        //检查用户是否已经将nft授权给合约地址
        require(nftContract.getApproved(tokenId)== address(this),"please first approval NFT to  market contract address");

        // 确保NFT存在且调用者是NFT的所有者
        require(nftContract.ownerOf(tokenId) == msg.sender, "Caller is not the owner of the token");

        // 确保NFT尚未上架
        require(!listings[tokenId].isForSale, "NFT is already listed");

        //存储nft信息
        listings[tokenId] = Listing(_nftAddress,tokenId, msg.sender, price, true);

        //触发上架事件
        emit NFTListed(tokenId, msg.sender, price);
    }

    // 购买市场上的NFT
    function buyNFT(uint256 tokenId) public {

        // 获取想要购买的nft信息
        Listing storage listing = listings[tokenId];

        // 判断该nft是否在售
        require(listing.isForSale, "NFT is not for sale");
        // 判断用户是否将erc20授权给market contract address
        require(erc20Contract.allowance(msg.sender, address(this)) >= listing.price,"please first approval erc20 to market contract address");

        // 从市场合约转移ERC20代币到卖家
        bool erc20TransferSuccess = erc20Contract.transferFrom(msg.sender,listing.seller,listing.price);
        require(erc20TransferSuccess, "ERC20 transfer failed");

        // 将NFT从卖家转移到买家
        nftContract.transferFrom(listing.seller, msg.sender, tokenId);  


        // 设置NFT为不再销售
        listing.isForSale = false;

        //触发购买事件
        emit NFTPurchased(tokenId, msg.sender, listing.price);
    }

}