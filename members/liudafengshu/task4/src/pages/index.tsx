"use client";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useMemo, useState } from "react";
import { useWriteContract, useAccount, useReadContract } from "wagmi";
import { address, nftAddress } from "../comfig";
import abi from "../abi.json";
import { type UseReadContractReturnType } from "wagmi";

const Home: NextPage = () => {
  const [nftContract, setnftContract] = useState(nftAddress);
  const [tokenId, settokenId] = useState("");
  const [price, setprice] = useState("");
  const { writeContract, isPending } = useWriteContract();
  const { isConnected } = useAccount();
  const result = useReadContract({
    abi,
    address,
    functionName: "getAllListings",
  });
  const lists = useMemo(() => {
    if (result.data) {
      return Array.from(result.data as any).filter(
        (item: any) => item.active && !!item.tokenId
      );
    }
    return [];
  }, [result.data]);
  const listNft = async () => {
    writeContract(
      {
        abi,
        address,
        functionName: "listNFT",
        args: [nftContract, tokenId, price],
      },
      {
        onSuccess() {
          alert("‰∏äÊû∂ÊàêÂäüÔºÅ");
        },
        onError(error) {
          alert(error.message);
        },
      }
    );
  };

  const buyList = (nftContract: unknown, tokenId: unknown) => {
    writeContract(
      {
        abi,
        address,
        functionName: "buyNFT",
        args: [nftContract, tokenId],
      },
      {
        onSuccess() {
          alert("Ë¥≠‰π∞ÊàêÂäüÔºÅ");
        },
        onError(error) {
          alert(error.message);
        },
      }
    );
  };

  useEffect(() => {
    // console.log(result.data, "result.data");
  }, [result]);
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <div className="max-w-2xl w-full">
          <h2 className="text-4xl font-extrabold dark:text-white mb-3">
            ‰∏äÊû∂nft
          </h2>
          <label
            htmlFor="small-input"
            className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >
            NftContract
          </label>
          <input
            type="text"
            id="small-input"
            value={nftContract}
            onInput={(e) => setnftContract(e.currentTarget.value)}
            className="block w-full p-2 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
          <label
            htmlFor="small-input"
            className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >
            tokenId
          </label>
          <input
            type="text"
            id="small-input"
            value={tokenId}
            onInput={(e) => settokenId(e.currentTarget.value)}
            className="block w-full p-2 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />
          <label
            htmlFor="small-input"
            className="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
          >
            price
          </label>
          <input
            type="text"
            id="small-input"
            value={price}
            onInput={(e) => setprice(e.currentTarget.value)}
            className="block w-full p-2 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
          />

          <button
            type="button"
            onClick={listNft}
            disabled={!isConnected || !nftContract || !tokenId || !price}
            className="py-2.5 px-5 me-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700"
          >
            {isPending ? "Ê≠£Âú®Êìç‰Ωú..." : "‰∏äÊû∂"}
          </button>
          <hr className="w-48 h-1 mx-auto my-4 bg-gray-100 border-0 rounded md:my-10 dark:bg-gray-700"></hr>
          <h2 className="text-4xl font-extrabold dark:text-white mb-3">
            Ë¥≠‰π∞nft
          </h2>

          <div className="relative overflow-x-auto">
            <table className="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
              <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                  <th scope="col" className="px-6 py-3">
                    tokenId
                  </th>
                  <th scope="col" className="px-6 py-3">
                    seller
                  </th>
                  <th scope="col" className="px-6 py-3">
                    Price
                  </th>
                  <th scope="col" className="px-6 py-3">
                    contractAddress
                  </th>
                  <th scope="col" className="px-6 py-3">
                    operate
                  </th>
                </tr>
              </thead>
              <tbody>
                {lists?.map((item: any) => {
                  return (
                    <tr className="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                      <td className="px-6 py-4">{item.tokenId.toString()}</td>
                      <td className="px-6 py-4">{item.seller}</td>
                      <td className="px-6 py-4">{item.price.toString()}</td>
                      <td className="px-6 py-4">{item.nftContract}</td>
                      <td className="px-6 py-4">
                        <button
                          onClick={() =>
                            buyList(item.nftContract, item.tokenId)
                          }
                        >
                          {isPending ? "Ê≠£Âú®Êìç‰Ωú.." : "Ë¥≠‰π∞nft"}
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};
export default Home;
